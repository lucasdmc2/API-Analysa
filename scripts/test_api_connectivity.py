#!/usr/bin/env python3
"""
Script para testar conectividade b√°sica da API Analysa
"""

import requests
import json

# Configura√ß√µes da API
API_BASE_URL = "https://api-analysa-production.up.railway.app"

def test_api_connectivity():
    """Testa conectividade b√°sica da API"""
    print("üîç Testando conectividade da API Analysa")
    print("=" * 50)
    
    # Teste 1: Health check b√°sico
    try:
        print("1Ô∏è‚É£ Testando endpoint raiz...")
        response = requests.get(f"{API_BASE_URL}/")
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ API respondendo")
        else:
            print(f"   ‚ö†Ô∏è  Resposta inesperada: {response.text[:100]}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    # Teste 2: Documenta√ß√£o Swagger
    try:
        print("\n2Ô∏è‚É£ Testando documenta√ß√£o Swagger...")
        response = requests.get(f"{API_BASE_URL}/docs")
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Swagger dispon√≠vel")
        else:
            print(f"   ‚ö†Ô∏è  Swagger n√£o dispon√≠vel: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    # Teste 3: OpenAPI spec
    try:
        print("\n3Ô∏è‚É£ Testando OpenAPI spec...")
        response = requests.get(f"{API_BASE_URL}/openapi.json")
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ OpenAPI spec dispon√≠vel")
            # Verifica endpoints dispon√≠veis
            try:
                spec = response.json()
                paths = spec.get("paths", {})
                print(f"   üìã Endpoints dispon√≠veis: {len(paths)}")
                for path in list(paths.keys())[:10]:  # Mostra os primeiros 10
                    print(f"      - {path}")
                if len(paths) > 10:
                    print(f"      ... e mais {len(paths) - 10} endpoints")
            except:
                print("   ‚ö†Ô∏è  N√£o foi poss√≠vel parsear o spec")
        else:
            print(f"   ‚ö†Ô∏è  OpenAPI spec n√£o dispon√≠vel: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    # Teste 4: Endpoint de auth register
    try:
        print("\n4Ô∏è‚É£ Testando endpoint de registro...")
        response = requests.post(f"{API_BASE_URL}/api/v1/auth/register", json={})
        print(f"   Status: {response.status_code}")
        if response.status_code in [422, 400]:  # 422 = Validation Error (endpoint existe)
            print("   ‚úÖ Endpoint de registro dispon√≠vel")
        else:
            print(f"   ‚ö†Ô∏è  Endpoint de registro n√£o dispon√≠vel: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    # Teste 5: Endpoint de upload de exames
    try:
        print("\n5Ô∏è‚É£ Testando endpoint de upload de exames...")
        response = requests.post(f"{API_BASE_URL}/api/v1/exams/upload", data={})
        print(f"   Status: {response.status_code}")
        if response.status_code in [422, 400, 401]:  # 422 = Validation Error (endpoint existe)
            print("   ‚úÖ Endpoint de upload dispon√≠vel")
        else:
            print(f"   ‚ö†Ô∏è  Endpoint de upload n√£o dispon√≠vel: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    print("\n" + "=" * 50)
    print("üèÅ Teste de conectividade conclu√≠do")

if __name__ == "__main__":
    test_api_connectivity()
