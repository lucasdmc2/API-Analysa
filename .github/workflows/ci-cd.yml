name: CI/CD Pipeline - API de Exames Médicos

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  test:
    name: 🧪 Testes e Qualidade
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort mypy
        
    - name: 🎨 Formatação de código (Black)
      run: |
        black --check --diff src/ tests/ scripts/
        
    - name: 📝 Organização de imports (isort)
      run: |
        isort --check-only --diff src/ tests/ scripts/
        
    - name: 🔍 Verificação de tipos (mypy)
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: 🧪 Executar testes com cobertura
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80
        
    - name: 📊 Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📋 Relatório de cobertura
      run: |
        echo "📊 Cobertura de testes:"
        coverage report --show-missing

  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: 🔍 Análise de segurança (Bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: 🛡️ Verificar vulnerabilidades (Safety)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: 📋 Relatório de segurança
      run: |
        echo "🔒 Relatório de Segurança:"
        if [ -f bandit-report.json ]; then
          echo "Bandit: $(cat bandit-report.json | jq -r '.metrics._totals.severity.HIGH // 0') vulnerabilidades HIGH"
        fi
        if [ -f safety-report.json ]; then
          echo "Safety: $(cat safety-report.json | jq -r '.vulnerabilities | length') vulnerabilidades encontradas"
        fi

  build:
    name: 🏗️ Build e Validação
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🐳 Build Docker image
      run: |
        docker build -t api-exames-medicos:latest .
        
    - name: 🧪 Teste da imagem Docker
      run: |
        docker run --rm api-exames-medicos:latest python -c "
        from src.core.config import get_settings_lazy
        print('✅ Configuração carregada com sucesso')
        "
        
    - name: 📋 Validação de estrutura
      run: |
        echo "📁 Estrutura do projeto:"
        find src/ -name "*.py" | wc -l | xargs echo "  - Arquivos Python:"
        find tests/ -name "*.py" | wc -l | xargs echo "  - Testes:"
        echo "  - Requirements: $(wc -l < requirements.txt)"
        echo "  - Dockerfile: $(test -f Dockerfile && echo '✅' || echo '❌')"

  deploy-staging:
    name: 🚀 Deploy Staging (Railway)
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🚂 Deploy para Railway Staging
      run: |
        echo "🚀 Deploy para staging via Railway CLI"
        echo "🔗 Service: ${{ secrets.RAILWAY_STAGING_SERVICE }}"
        echo "📋 Configure o deploy automático no Railway Dashboard"
        
    - name: 🔍 Verificar deploy
      run: |
        echo "🚀 Deploy para staging configurado"
        echo "📋 Configure o Railway para deploy automático"

  deploy-production:
    name: 🚀 Deploy Produção (Railway)
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🚂 Deploy para Railway Produção
      run: |
        echo "🚀 Deploy para produção via Railway CLI"
        echo "🔗 Service: ${{ secrets.RAILWAY_PRODUCTION_SERVICE }}"
        echo "📋 Configure o deploy automático no Railway Dashboard"
        
    - name: 🔍 Verificar deploy
      run: |
        echo "🚀 Deploy para produção configurado"
        echo "📋 Configure o Railway para deploy automático"
        
    - name: 📋 Notificar sucesso
      run: |
        echo "🎉 Pipeline de CI/CD configurado com sucesso!"
        echo "📚 Swagger UI estará disponível em /docs"
        echo "📖 ReDoc estará disponível em /redoc"
